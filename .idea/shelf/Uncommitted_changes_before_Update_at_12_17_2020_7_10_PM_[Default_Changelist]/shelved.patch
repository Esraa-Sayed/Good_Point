Index: app/src/main/java/com/helloworld/goodpoint/ui/SignupActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.helloworld.goodpoint.ui;\r\n\r\n<<<<<<< HEAD\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.fragment.app.Fragment;\r\n\r\n=======\r\n>>>>>>> d163ba2bfa932ba97fea23352ed1765335c5732b\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Intent;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.Color;\r\nimport android.graphics.drawable.ColorDrawable;\r\nimport android.os.Bundle;\r\nimport android.provider.MediaStore;\r\nimport android.view.ContextMenu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.helloworld.goodpoint.R;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Calendar;\r\nimport java.util.regex.Pattern;\r\n\r\n<<<<<<< HEAD\r\nimport com.helloworld.goodpoint.R;\r\nimport android.util.Patterns;\r\n\r\n=======\r\n>>>>>>> d163ba2bfa932ba97fea23352ed1765335c5732b\r\npublic class SignupActivity extends AppCompatActivity {\r\n    private TextView DateT;\r\n    private EditText UserName, Email, Password, Phone, Country;\r\n    private DatePickerDialog.OnDateSetListener DateSet;\r\n    private int year, month, Day;\r\n    private ImageView image;\r\n    Button CreateAccount;\r\n    private static final Pattern PASSWORD_PATTERN =\r\n            Pattern.compile(\"^\" +\r\n                    //\"(?=.*[0-9])\" +         //at least 1 digit\r\n                    //\"(?=.*[a-z])\" +         //at least 1 lower case letter\r\n                    //\"(?=.*[A-Z])\" +         //at least 1 upper case letter\r\n                    \"(?=.*[a-zA-Z])\" +      //any letter\r\n                    \"(?=.*[@#$%^&+=])\" +    //at least 1 special character\r\n                    \"(?=\\\\S+$)\" +           //no white spaces\r\n                    \".{4,}\" +               //at least 4 characters\r\n                    \"$\");\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_signup);\r\n        inti();\r\n        DateT.setOnClickListener(new View.OnClickListener() {\r\n            // @RequiresApi(api = Build.VERSION_CODES.N)\r\n            @Override\r\n            public void onClick(View view) {\r\n                DatePickerDialog dialog = new DatePickerDialog(\r\n                        SignupActivity.this,\r\n                        android.R.style.Theme_Holo_Light_Dialog_MinWidth,\r\n                        DateSet,\r\n                        year, month, Day\r\n                );\r\n                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));\r\n                dialog.show();\r\n            }\r\n\r\n        });\r\n        DateSet = new DatePickerDialog.OnDateSetListener() {\r\n            @Override\r\n            public void onDateSet(DatePicker datePicker, int y, int m, int d) {\r\n                m++;\r\n                if (y > year) {\r\n                    Toast.makeText(SignupActivity.this, \"\", Toast.LENGTH_SHORT).show();\r\n                    String todayDate = year + \"/\" + (month + 1) + \"/\" + Day;\r\n                    DateT.setText(todayDate);\r\n                } else {\r\n                    Toast.makeText(SignupActivity.this, \"hi\", Toast.LENGTH_SHORT).show();\r\n                    String Date = d + \"/\" + m + \"/\" + y;\r\n                    DateT.setText(Date);\r\n                }\r\n            }\r\n        };\r\n    CreateAccount.setOnClickListener(new View.OnClickListener() {\r\n        @Override\r\n        public void onClick(View view) {\r\n\r\n        }\r\n    });\r\n    }\r\n\r\n    protected void inti() {\r\n        UserName = findViewById(R.id.Name);\r\n        Email = findViewById(R.id.Email);\r\n        Password = findViewById(R.id.Pass);\r\n        Country = findViewById(R.id.country);\r\n        DateT = findViewById(R.id.Date);\r\n        image = findViewById(R.id.im);\r\n        CreateAccount = findViewById(R.id.createAccount);\r\n        Calendar cal = Calendar.getInstance();//To get today's date\r\n        year = cal.get(Calendar.YEAR);\r\n        month = cal.get(Calendar.MONTH);\r\n        Day = cal.get(Calendar.DAY_OF_MONTH);\r\n        String TodayDate = Day + \"/\" + (month + 1) + \"/\" + year;\r\n        DateT.setText(TodayDate);\r\n    }\r\n\r\n    @Override\r\n    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {\r\n        super.onCreateContextMenu(menu, v, menuInfo);\r\n        getMenuInflater().inflate(R.menu.menu_main, menu);\r\n        Toast.makeText(this, \"onCreateContextMenu\", Toast.LENGTH_SHORT);\r\n        //menu.getItem(2).setEnabled(false);\r\n        menu.findItem(R.id.Delete).setVisible(false);\r\n    }\r\n\r\n    @Override\r\n    public boolean onContextItemSelected(@NonNull MenuItem item) {\r\n        switch (item.getItemId()) {\r\n            case R.id.action_capture:\r\n                //Toast.makeText(this,\"Hello!!\",Toast.LENGTH_SHORT).show();\r\n                Intent cameraIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);\r\n                if (cameraIntent.resolveActivity(getPackageManager()) != null) {\r\n                    startActivityForResult(cameraIntent, 10);\r\n                }\r\n                break;\r\n            case R.id.action_choose:\r\n                //Toast.makeText(this,\"Hello\",Toast.LENGTH_SHORT).show();\r\n                Intent gallery = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.INTERNAL_CONTENT_URI);\r\n                startActivityForResult(gallery, 11);\r\n                break;\r\n        }\r\n\r\n        return super.onContextItemSelected(item);\r\n    }\r\n\r\n    @Override\r\n    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {\r\n        super.onActivityResult(requestCode, resultCode, data);\r\n    }\r\n    private boolean validateEmail() {\r\n        String emailInput = Email.getText().toString().trim();\r\n        if (emailInput.isEmpty()) {\r\n            Email.setError(\"Field can't be empty\");\r\n            return false;\r\n        } else if (!Patterns.EMAIL_ADDRESS.matcher(emailInput).matches()) {\r\n            Email.setError(\"Please enter a valid email address\");\r\n            return false;\r\n        } else {\r\n            Email.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n    private boolean validateUsername() {\r\n        String usernameInput = UserName.getText().toString().trim();\r\n        if (usernameInput.isEmpty()) {\r\n            UserName.setError(\"Field can't be empty\");\r\n            return false;\r\n        } else if (usernameInput.length() > 15) {\r\n            UserName.setError(\"Username too long\");\r\n            return false;\r\n        } else {\r\n            UserName.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n    private boolean validatePassword() {\r\n        String passwordInput = Password.getText().toString().trim();\r\n        if (passwordInput.isEmpty()) {\r\n            Password.setError(\"Field can't be empty\");\r\n            return false;\r\n        } else if (!PASSWORD_PATTERN.matcher(passwordInput).matches()) {\r\n            Password.setError(\"Password too weak\");\r\n            return false;\r\n        } else {\r\n            Password.setError(null);\r\n            return true;\r\n        }\r\n    }\r\n    public void confirmInput(View v) {\r\n        if (!validateEmail() | !validateUsername() | !validatePassword()) {\r\n            return;\r\n        }\r\n        String input = \"Email: \" + Email.getText().toString();\r\n        input += \"\\n\";\r\n        input += \"Username: \" + UserName.getText().toString();\r\n        input += \"\\n\";\r\n        input += \"Password: \" + Password.getText().toString();\r\n        Toast.makeText(this, input, Toast.LENGTH_SHORT).show();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/helloworld/goodpoint/ui/SignupActivity.java	(revision 815e0693e4b129ce26610574d28e90aee7b913c9)
+++ app/src/main/java/com/helloworld/goodpoint/ui/SignupActivity.java	(date 1608179258331)
@@ -1,43 +1,31 @@
 package com.helloworld.goodpoint.ui;
 
-<<<<<<< HEAD
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.appcompat.app.AppCompatActivity;
-import androidx.fragment.app.Fragment;
-
-=======
->>>>>>> d163ba2bfa932ba97fea23352ed1765335c5732b
 import android.app.DatePickerDialog;
 import android.content.Intent;
-import android.graphics.Bitmap;
 import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
 import android.os.Bundle;
 import android.provider.MediaStore;
+import android.util.Patterns;
 import android.view.ContextMenu;
 import android.view.MenuItem;
 import android.view.View;
+import android.widget.Button;
 import android.widget.DatePicker;
 import android.widget.EditText;
 import android.widget.ImageView;
 import android.widget.TextView;
 import android.widget.Toast;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import androidx.appcompat.app.AppCompatActivity;
 
 import com.helloworld.goodpoint.R;
 
-import java.io.IOException;
 import java.util.Calendar;
 import java.util.regex.Pattern;
 
-<<<<<<< HEAD
-import com.helloworld.goodpoint.R;
-import android.util.Patterns;
-
-=======
->>>>>>> d163ba2bfa932ba97fea23352ed1765335c5732b
 public class SignupActivity extends AppCompatActivity {
     private TextView DateT;
     private EditText UserName, Email, Password, Phone, Country;
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_12_8_2020_7_12_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_12_8_2020_7_12_PM__Default_Changelist_.xml
